# -*- coding: utf-8 -*-
"""Multiple Disease Prediction System-Heart Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSZsafr65ooP4ck8A1ejcm6nRGrOcNTk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

heart_data=pd.read_csv('/content/heart_disease_data.csv')

heart_data.head()

heart_data.tail()

heart_data.shape

heart_data.info()

heart_data.describe()

heart_data['target'].value_counts()

"""1-> defective heart

0->healthy heart
"""

X=heart_data.drop(columns='target',axis=1)
Y=heart_data['target']

print(X)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

"""**Model Training**


Logistic Regression
"""

model=LogisticRegression()

model.fit(X_train,Y_train)

"""**Model Evaluation**

Accuracy Score
"""

#accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy on Training data : ',training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy on Test data: ',test_data_accuracy)

"""**Build a predictive system**"""

#print("Input values:", X_train.iloc[0].values)
input_data=(58,1,0,114,318,0,2,140,0,4.4,0,3,1)

#change input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the numpy array as we are predicting for only one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print('The person does not have a heart disease')
else:
  print('The person has heart disease')

#print("Input values:", X_train.iloc[0].values)
input_data=(62,0,0,140,394,0,0,157,0,1.2,1,0,2)

#change input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the numpy array as we are predicting for only one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print('The person does not have a heart disease')
else:
  print('The person has heart disease')

"""Save the trained model"""

import pickle

filename='heart_disease_model.sav'
pickle.dump(model,open(filename,'wb'))

#loading the saved model
loaded_model=pickle.load(open('heart_disease_model.sav','rb'))

